Ngày xửa ngày xưa, xưa ơi là xưa, xưa xửa xừa xưa, ở vương quốc “Nọ” có một chàng hiệp sĩ... nghèo. Hiệp sĩ thầm thương trộm nhớ một nàng công chúa, con của Quốc Vương. Ngày kia triều đình mở hội kén rể cho công chúa, do công chúa có thân hình mỹ miều, nhan sắc bá đạo, FA lâu năm nên điều kiện nhà vua đưa ra vô cùng đơn giản, ai đến sớm nhất là được cưới công chúa không cần sính lễ, ngoài ra còn được vua bonus thêm của hồi môn, miễn là cưới công chúa đi càng sớm càng tốt.

Hiệp sĩ vô cùng mừng rỡ và hăm hở lên đường, tuy nhiên do chàng rất nghèo chỉ có thể đi bộ nên chàng phải tìm con đường ngắn nhất để có thể đến kịp và rước được công chúa.

Bản đồ của vương quốc là một hình chữ nhật gồm m x n ô vuông (m, n < 5000), hiệp sĩ có thể đi theo bất cứ đường nào từ một ô đến các ô lân cận (ngang dọc hoặc chéo) thời gian để đi từ ô này sang ô kia là một canh giờ.

Các ô trên bản đồ được đánh tọa độ theo số dòng và số cột, ô ở góc dưới cùng bên tay trái bản đồ có tọa độ là (0, 0) và ô ở góc trên cùng bên tay phải bản đồ có tọa độ (m-1, n-1). Hiệp sĩ không được đi ra khỏi vương quốc, nếu không sẽ bị nước láng giềng tóm cổ tống giam không lấy được công chúa. Trên bản đồ có một số ô là núi cao, vực sâu, rừng thiêng nước độc không thể đi vào được. Hãy viết chương trình cho biết nếu hiệp sĩ đi suốt ngày suốt đêm không ăn không ngủ, không làm cả các “nhu cầu khác” thì phải mất bao nhiêu canh giờ hiệp sĩ mới lên được kinh đô để cưới công chúa.


INPUT

Dòng đầu tiên của input chứa 6 con số cách nhau bởi khoảng trắng, hai con số đầu lần lượt là m, n, hai số tiếp theo là tọa độ nhà của hiệp sĩ và hai con số của cùng là tọa độ của hoàng cung nơi công chúa đang mỏi mắt trông một tấm chồng.

m dòng tiếp theo trong input, mỗi dòng chứa n con số cách nhau bởi khoảng trắng. Đây là toàn bộ bản đồ vương quốc với con số 0 tượng trưng cho những ô có thể đi vào được và con số 1 tượng trưng cho những ô không thể đi vào được.


OUTPUT

Một con số duy nhất cho biết thời gian hiệp sĩ cần để đến được chỗ công chúa, tính theo canh giờ. Nếu hiệp sĩ không thể đến được chỗ công chúa xuất ra -1





#include <map>
#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <list>
#include<functional>
#include <math.h>
#include <queue>
using namespace std;
struct Point {
    int tmp;//Trang thai 0 hoac 1
    int x;
    int y;
    //Toa do cua Dinh
    int g; //Khoang cach tu dinh ban dau den dinh hien tai
    int f; //f=g+h
    int h; //Duong di ngan nhat
    int close;
    //Point Cha;
    Point()
    {
 
    }
    Point(const Point &x)
    {
        this->tmp = x.tmp;
        this->x = x.x;
        this->y = x.y;
        this->g = x.g;
        this->f = x.f;
        this->h = x.h;
        this->close = x.close;
    }
    bool operator < (Point b) const
    {
        return f < b.f;
    }
    bool operator > (Point b) const
    {
        return f > b.f;
    }
};
 
struct cmp {
 
};
 
void Init(Point &A) {
    A.g = 0;
 
    A.f = A.g + A.h;
    //  Cha=NULL;
}
int Pytago(Point A, Point B) {
    return (int)sqrt(((B.x - A.x)*(B.x - A.x)) + ((B.y - A.y)*(B.y - A.y)));
}
 
Point GTNN(vector< vector<Point> > Matrix, priority_queue<Point, vector<Point>, greater<Point> > DsKe) {
    Point tmp = DsKe.top();
    DsKe.pop();
    while (DsKe.empty() == false) {
        if (tmp.f > DsKe.top().f)
            tmp = DsKe.top();
        DsKe.pop();
    }
    return tmp;
}
void TimDinhKe(int n, int m, Point &A, vector< vector<Point> > &Matrix, priority_queue<Point, vector<Point>, greater<Point> > &Open, Point &Princess)
{
 
    vector<Point> ListKe;
    int dx[8] = { -1,-1,-1, 0, 0, 1, 1, 1 };
    int dy[8] = { -1, 0, 1,-1, 1,-1, 0, 1 };
    int flag = 0;
    for (int i = 0; i < 8; i++)
    {
        int k = A.x + dx[i];
        int j = A.y + dy[i];
        if (k >= 0 && k < m && j >= 0 && j < n && Matrix[k][j].tmp == 0 && Matrix[k][j].close == 0)
        {
            //Matrix[A.x+dx[i]][A.y+dy[i]].h=Pytago(Matrix[A.x+dx[i]][A.y+dy[i]],Princess);
            //cout<<Matrix[A.x+dx[i]][A.y+dy[i]].g<<" ";
            //cout << "A.x " << Matrix[A.x][A.y].g << " ";
            if (Matrix[k][j].g > A.g + 1)
            {
                Matrix[k][j].g = A.g + 1;
                Matrix[k][j].f = Matrix[k][j].h + Matrix[k][j].g;
                //ListKe.push_back(Matrix[A.x+dx[i]][A.y+dy[i]]);
                //flag++;
                Open.push(Point(Matrix[k][j]));
            }
 
        }
    }
    // Point Ke;
    //Ke=GTNN(Matrix,ListKe);
    //return Ke;
}
 
 
void Astar(int n, int m, Point &Knight, Point &Princess, vector<vector<Point> >Matrix) {
    //vector <Point> Close;
    priority_queue<Point, vector<Point>, greater<Point> > Open;
    //priority_queue<Point, vector<Point>, cmp > Ke;
    //Init(Knight);
    Open.push(Point(Knight));
    Point pre;
    while (Open.empty() == false)
    {
        pre = Open.top();
        Open.pop();
        Matrix[pre.x][pre.y].close = 1;
        if (pre.x == Princess.x && pre.y == Princess.y)
        {
            cout << pre.g;
            return;
        }
        else
        {
            TimDinhKe(n, m, pre, Matrix, Open, Princess);
            //pre=GTNN(Matrix,Open);
        }
    }
    cout << -1;
 
}
 
int main() {
 
    int m, n;
    int x1, y1;
    Point Knight, Princess;
    cin >> m >> n >> x1 >> y1 >> Princess.x >> Princess.y;
    vector< vector<Point> > Matrix(m, vector<Point>(n));
    for (int i = m - 1; i >= 0; i--) {
        for (int j = 0; j < n; j++) {
            cin >> Matrix[i][j].tmp;
            Matrix[i][j].x = i;
            Matrix[i][j].y = j;
            Matrix[i][j].g = 10000000;
            Matrix[i][j].h = 0;
            Matrix[i][j].close = 0;
        }
    }
    Knight = Matrix[x1][y1];
    Knight.g = 0;
    Knight.f = Knight.g + Knight.h;
    Astar(n, m, Knight, Princess, Matrix);
    /*Init(Knight);
    priority_queue<Point, vector<Point>, cmp > Open;
    TimDinhKe(n, m, Knight, Matrix, Open, Princess);
    while (Open.empty() == false) {
        cout << Open.top().x << " " << Open.top().y;
        cout << endl;
        Open.pop();
    }*/
 
    /*for(int i=0;i<m;i++){
    for(int j=0;j<n;j++){
    cout<<Matrix[i][j].tmp;
    }
    cout<<endl;*/
    //}
}
